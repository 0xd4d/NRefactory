<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>11.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <ProjectGuid>{9B591CDB-4085-4BFF-BC05-6537C6AA7D87}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>NR6Pack</RootNamespace>
    <AssemblyName>NR6Pack</AssemblyName>
    <TargetFrameworkProfile>Profile7</TargetFrameworkProfile>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs">
      <Link>CodeActions\AbstractAndVirtualConversionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs">
      <Link>CodeActions\AddAnotherAccessorAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddArgumentNameAction.cs">
      <Link>CodeActions\AddArgumentNameAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddBracesAction.cs">
      <Link>CodeActions\AddBracesAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddCatchTypeAction.cs">
      <Link>CodeActions\AddCatchTypeAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddOptionalParameterToInvocationAction.cs">
      <Link>CodeActions\AddOptionalParameterToInvocationAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CheckIfParameterIsNullAction.cs">
      <Link>CodeActions\CheckIfParameterIsNullAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ComputeConstantValueAction.cs">
      <Link>CodeActions\ComputeConstantValueAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertAnonymousDelegateToLambdaAction.cs">
      <Link>CodeActions\ConvertAnonymousDelegateToLambdaAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertAssignmentToIfAction.cs">
      <Link>CodeActions\ConvertAssignmentToIfAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertAsToCastAction.cs">
      <Link>CodeActions\ConvertAsToCastAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs">
      <Link>CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertCastToAsAction.cs">
      <Link>CodeActions\ConvertCastToAsAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertDecToHexAction.cs">
      <Link>CodeActions\ConvertDecToHexAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertDoWhileToWhileLoopAction.cs">
      <Link>CodeActions\ConvertDoWhileToWhileLoopAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs">
      <Link>CodeActions\ConvertEqualityOperatorToEqualsAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs">
      <Link>CodeActions\ConvertEqualsToEqualityOperatorAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertExplicitToImplicitImplementationAction.cs">
      <Link>CodeActions\ConvertExplicitToImplicitImplementationAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs">
      <Link>CodeActions\ConvertForeachToForAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForToWhileAction.cs">
      <Link>CodeActions\ConvertForToWhileAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs">
      <Link>CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHexToDecAction.cs">
      <Link>CodeActions\ConvertHexToDecAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToConditionalTernaryExpressionAction.cs">
      <Link>CodeActions\ConvertIfStatementToConditionalTernaryExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs">
      <Link>CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToReturnStatementAction.cs">
      <Link>CodeActions\ConvertIfStatementToReturnStatementAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToSwitchStatementAction.cs">
      <Link>CodeActions\ConvertIfStatementToSwitchStatementAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertImplicitToExplicitImplementationAction.cs">
      <Link>CodeActions\ConvertImplicitToExplicitImplementationAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertLambdaBodyExpressionToStatementAction.cs">
      <Link>CodeActions\ConvertLambdaBodyExpressionToStatementAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertLambdaBodyStatementToExpressionAction.cs">
      <Link>CodeActions\ConvertLambdaBodyStatementToExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertLambdaToAnonymousDelegateAction.cs">
      <Link>CodeActions\ConvertLambdaToAnonymousDelegateAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMethodGroupToAnonymousMethodAction.cs">
      <Link>CodeActions\ConvertMethodGroupToAnonymousMethodAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMethodGroupToLambdaAction.cs">
      <Link>CodeActions\ConvertMethodGroupToLambdaAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMultiplyToShiftAction.cs">
      <Link>CodeActions\ConvertMultiplyToShiftAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertNullCoalescingToConditionalExpressionAction.cs">
      <Link>CodeActions\ConvertNullCoalescingToConditionalExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertReturnStatementToIfAction.cs">
      <Link>CodeActions\ConvertReturnStatementToIfAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertShiftToMultiplyAction.cs">
      <Link>CodeActions\ConvertShiftToMultiplyAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertSwitchToIfAction.cs">
      <Link>CodeActions\ConvertSwitchToIfAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertWhileToDoWhileLoopAction.cs">
      <Link>CodeActions\ConvertWhileToDoWhileLoopAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateBackingStoreAction.cs">
      <Link>CodeActions\CreateBackingStoreAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateChangedEventAction.cs">
      <Link>CodeActions\CreateChangedEventAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateCustomEventImplementationAction.cs">
      <Link>CodeActions\CreateCustomEventImplementationAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CS1105ExtensionMethodMustBeDeclaredStaticAction.cs">
      <Link>CodeActions\CS1105ExtensionMethodMustBeDeclaredStaticAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtensionMethodInvocationToStaticMethodInvocationAction.cs">
      <Link>CodeActions\ExtensionMethodInvocationToStaticMethodInvocationAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractAnonymousMethodAction.cs">
      <Link>CodeActions\ExtractAnonymousMethodAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractWhileConditionToInternalIfStatementAction.cs">
      <Link>CodeActions\ExtractWhileConditionToInternalIfStatementAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs">
      <Link>CodeActions\FlipEqualsTargetAndArgumentAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipOperatorArgumentsAction.cs">
      <Link>CodeActions\FlipOperatorArgumentsAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GenerateSwitchLabelsAction.cs">
      <Link>CodeActions\GenerateSwitchLabelsAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementNotImplementedProperty.cs">
      <Link>CodeActions\ImplementNotImplementedProperty.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertConditionalOperatorAction.cs">
      <Link>CodeActions\InvertConditionalOperatorAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertIfAction.cs">
      <Link>CodeActions\InvertIfAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertIfAndSimplify.cs">
      <Link>CodeActions\InvertIfAndSimplify.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertLogicalExpressionAction.cs">
      <Link>CodeActions\InvertLogicalExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinDeclarationAndAssignmentAction.cs">
      <Link>CodeActions\JoinDeclarationAndAssignmentAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinStringAction.cs">
      <Link>CodeActions\JoinStringAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\NegateIsExpressionAction.cs">
      <Link>CodeActions\NegateIsExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\NegateRelationalExpressionAction.cs">
      <Link>CodeActions\NegateRelationalExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBackingStoreAction.cs">
      <Link>CodeActions\RemoveBackingStoreAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBracesAction.cs">
      <Link>CodeActions\RemoveBracesAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveRegionAction.cs">
      <Link>CodeActions\RemoveRegionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceAssignmentWithPostfixExpressionAction.cs">
      <Link>CodeActions\ReplaceAssignmentWithPostfixExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceEmptyStringAction.cs">
      <Link>CodeActions\ReplaceEmptyStringAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceOperatorAssignmentWithAssignmentAction.cs">
      <Link>CodeActions\ReplaceOperatorAssignmentWithAssignmentAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplacePostfixExpressionWithAssignmentAction.cs">
      <Link>CodeActions\ReplacePostfixExpressionWithAssignmentAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceWithOperatorAssignmentAction.cs">
      <Link>CodeActions\ReplaceWithOperatorAssignmentAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SimplifyIfFlowAction.cs">
      <Link>CodeActions\SimplifyIfFlowAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SimplifyIfInLoopsFlowAction.cs">
      <Link>CodeActions\SimplifyIfInLoopsFlowAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SpecializedCodeAction.cs">
      <Link>CodeActions\SpecializedCodeAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitDeclarationAndAssignmentAction.cs">
      <Link>CodeActions\SplitDeclarationAndAssignmentAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitIfAction.cs">
      <Link>CodeActions\SplitIfAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs">
      <Link>CodeActions\UseAsAndNullCheckAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseExplicitTypeAction.cs">
      <Link>CodeActions\UseExplicitTypeAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseVarKeywordAction.cs">
      <Link>CodeActions\UseVarKeywordAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\RedundantInternalIssue.cs">
      <Link>CodeIssues\RedundantInternalIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\RedundantPrivateIssue.cs">
      <Link>CodeIssues\RedundantPrivateIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\IssueCategories.cs">
      <Link>Common\IssueCategories.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\IssueMarker.cs">
      <Link>Common\IssueMarker.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NRefactoryCodeFixProvider.cs">
      <Link>Common\NRefactoryCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\BaseMethodCallWithDefaultParameterIssue.cs">
      <Link>CodeIssues\CodeQuality\BaseMethodCallWithDefaultParameterIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\BitwiseOperatorOnEnumWithoutFlagsIssue.cs">
      <Link>CodeIssues\CodeQuality\BitwiseOperatorOnEnumWithoutFlagsIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\CompareNonConstrainedGenericWithNullIssue.cs">
      <Link>CodeIssues\CodeQuality\CompareNonConstrainedGenericWithNullIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\CompareOfFloatsByEqualityOperatorIssue.cs">
      <Link>CodeIssues\CodeQuality\CompareOfFloatsByEqualityOperatorIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\ConditionalTernaryEqualBranchIssue.cs">
      <Link>CodeIssues\CodeQuality\ConditionalTernaryEqualBranchIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\DelegateSubtractionIssue.cs">
      <Link>CodeIssues\CodeQuality\DelegateSubtractionIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\DoNotCallOverridableMethodsInConstructorIssue.cs">
      <Link>CodeIssues\CodeQuality\DoNotCallOverridableMethodsInConstructorIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\EmptyGeneralCatchClauseIssue.cs">
      <Link>CodeIssues\CodeQuality\EmptyGeneralCatchClauseIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\FunctionNeverReturnsIssue.cs">
      <Link>CodeIssues\CodeQuality\FunctionNeverReturnsIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\LongLiteralEndingLowerLIssue.cs">
      <Link>CodeIssues\CodeQuality\LongLiteralEndingLowerLIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\NonReadonlyReferencedInGetHashCodeIssue.cs">
      <Link>CodeIssues\CodeQuality\NonReadonlyReferencedInGetHashCodeIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\ObjectCreationAsStatementIssue.cs">
      <Link>CodeIssues\CodeQuality\ObjectCreationAsStatementIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\OperatorIsCanBeUsedIssue.cs">
      <Link>CodeIssues\CodeQuality\OperatorIsCanBeUsedIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\OptionalParameterRefOutIssue.cs">
      <Link>CodeIssues\CodeQuality\OptionalParameterRefOutIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\NUnit\NonPublicMethodWithTestAttributeIssue.cs">
      <Link>CodeIssues\NUnit\NonPublicMethodWithTestAttributeIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertConditionalTernaryToNullCoalescingIssue.cs">
      <Link>CodeIssues\Opportunities\ConvertConditionalTernaryToNullCoalescingIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs">
      <Link>CodeIssues\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToSwitchStatementIssue.cs">
      <Link>CodeIssues\Opportunities\ConvertIfStatementToSwitchStatementIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertNullableToShortFormIssue.cs">
      <Link>CodeIssues\Opportunities\ConvertNullableToShortFormIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertToStaticTypeIssue.cs">
      <Link>CodeIssues\Opportunities\ConvertToStaticTypeIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\InvokeAsExtensionMethodIssue.cs">
      <Link>CodeIssues\Opportunities\InvokeAsExtensionMethodIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\AccessToStaticMemberViaDerivedTypeIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\AccessToStaticMemberViaDerivedTypeIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\BaseMemberHasParamsIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\BaseMemberHasParamsIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertIfToOrExpressionIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\ConvertIfToOrExpressionIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\EmptyEmbeddedStatementIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\EmptyEmbeddedStatementIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\PossibleMistakenCallToGetTypeIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\PossibleMistakenCallToGetTypeIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithFirstOrDefaultIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\ReplaceWithFirstOrDefaultIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithLastOrDefaultIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\ReplaceWithLastOrDefaultIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithSimpleAssignmentIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\ReplaceWithSimpleAssignmentIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\SimplifyConditionalTernaryExpressionIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\SimplifyConditionalTernaryExpressionIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringEndsWithIsCultureSpecificIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\StringEndsWithIsCultureSpecificIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringIndexOfIsCultureSpecificIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\StringIndexOfIsCultureSpecificIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringLastIndexOfIsCultureSpecificIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\StringLastIndexOfIsCultureSpecificIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringStartsWithIsCultureSpecificIssue.cs">
      <Link>CodeIssues\PracticesAndImprovements\StringStartsWithIsCultureSpecificIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\ArrayCreationCanBeReplacedWithArrayInitializerIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\ArrayCreationCanBeReplacedWithArrayInitializerIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\ConditionIsAlwaysTrueOrFalseIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\ConditionIsAlwaysTrueOrFalseIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\DoubleNegationOperatorIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\DoubleNegationOperatorIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\EmptyStatementIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\EmptyStatementIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\ForStatementConditionIsTrueIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\ForStatementConditionIsTrueIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantAnonymousTypePropertyNameIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantAnonymousTypePropertyNameIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantArgumentNameIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantArgumentNameIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantAttributeParenthesesIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantAttributeParenthesesIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantBaseQualifierIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantBaseQualifierIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantCaseLabelIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantCaseLabelIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantCastIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantCastIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantEmptyDefaultSwitchBranchIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantEmptyDefaultSwitchBranchIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantNameQualifierIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantNameQualifierIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantTernaryExpressionIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RedundantTernaryExpressionIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RemoveRedundantOrStatementIssue.cs">
      <Link>CodeIssues\RedundanciesInCode\RemoveRedundantOrStatementIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInDeclaration\EmptyConstructorIssue.cs">
      <Link>CodeIssues\RedundanciesInDeclaration\EmptyConstructorIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInDeclaration\EmptyDestructorIssue.cs">
      <Link>CodeIssues\RedundanciesInDeclaration\EmptyDestructorIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInDeclaration\EmptyNamespaceIssue.cs">
      <Link>CodeIssues\RedundanciesInDeclaration\EmptyNamespaceIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInDeclaration\EnumUnderlyingTypeIsIntIssue.cs">
      <Link>CodeIssues\RedundanciesInDeclaration\EnumUnderlyingTypeIsIntIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInDeclaration\SealedMemberInSealedClassIssue.cs">
      <Link>CodeIssues\RedundanciesInDeclaration\SealedMemberInSealedClassIssue.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\NRefactoryCodeDiagnosticAnalyzerAttribute.cs">
      <Link>Common\NRefactoryCodeDiagnosticAnalyzerAttribute.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\NRefactoryCodeRefactoringProviderAttribute.cs">
      <Link>Common\NRefactoryCodeRefactoringProviderAttribute.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\RefactoringHelpers.cs">
      <Link>Common\RefactoringHelpers.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Refactoring\TypeGuessing.cs">
      <Link>Common\TypeGuessing.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Reflection\CSharpSyntaxContext.cs">
      <Link>Common\CSharpSyntaxContext.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CompilationExtensions.cs">
      <Link>Common\CompilationExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CSharpUtil.cs">
      <Link>Common\CSharpUtil.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\NamespaceExtensions.cs">
      <Link>Common\NamespaceExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SignatureComparer.cs">
      <Link>Common\SignatureComparer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SymbolExtensions.cs">
      <Link>Common\SymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxExtensions.cs">
      <Link>Common\SyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TypeExtensions.cs">
      <Link>Common\TypeExtensions.cs</Link>
    </Compile>
    <Compile Include="Common\CodeActionFactory.cs" />
    <Compile Include="Common\DescriptionAttribute.cs" />
    <Compile Include="Common\DocumentChangeAction.cs" />
    <Compile Include="Common\Extensions.cs" />
    <Compile Include="Common\GatherVisitorBase.cs" />
    <Compile Include="Common\NRefactoryCodeAction.cs" />
    <Compile Include="Common\StringExtensions.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CodeAnalysis">
      <HintPath>..\packages\Microsoft.CodeAnalysis.Common.1.0.0-beta1-20141031-01\lib\portable-net45+win8\Microsoft.CodeAnalysis.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp">
      <HintPath>..\packages\Microsoft.CodeAnalysis.CSharp.1.0.0-beta1-20141031-01\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp.Workspaces">
      <HintPath>..\packages\Microsoft.CodeAnalysis.CSharp.Workspaces.1.0.0-beta1-20141031-01\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.Workspaces.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.Workspaces">
      <HintPath>..\packages\Microsoft.CodeAnalysis.Workspaces.Common.1.0.0-beta1-20141031-01\lib\portable-net45+win8\Microsoft.CodeAnalysis.Workspaces.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Collections.Immutable">
      <HintPath>..\packages\System.Collections.Immutable.1.1.32-beta\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.AttributedModel">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.AttributedModel.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Convention">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Convention.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Hosting">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Hosting.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.Runtime">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Runtime.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Composition.TypedParts">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.TypedParts.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Reflection.Metadata">
      <HintPath>..\packages\System.Reflection.Metadata.1.0.17-beta\lib\portable-net45+win8\System.Reflection.Metadata.dll</HintPath>
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <None Include="NR6Pack.nuspec">
      <SubType>Designer</SubType>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="packages.config" />
    <None Include="tools\build-nuget-package.ps1" />
    <None Include="tools\install.ps1" />
    <None Include="tools\uninstall.ps1" />
  </ItemGroup>
  <ItemGroup>
    <None Include="missing.md" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="CodeIssues\CompilerErrors\" />
    <Folder Include="CodeIssues\CompilerWarnings\" />
    <Folder Include="CodeIssues\ConstraintViolations\InconsistentNamingIssue\" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="CodeActions.html.template" />
    <None Include="CodeIssues.html.template" />
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />
  <PropertyGroup>
    <PostBuildEvent>powershell $(ProjectDir)tools\build-nuget-package.ps1 $(ConfigurationName)</PostBuildEvent>
  </PropertyGroup>
  <Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(SolutionDir)\.nuget\NuGet.targets')" Text="$([System.String]::Format('$(ErrorText)', '$(SolutionDir)\.nuget\NuGet.targets'))" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>