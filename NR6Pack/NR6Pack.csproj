<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>11.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <ProjectGuid>{9B591CDB-4085-4BFF-BC05-6537C6AA7D87}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>NR6Pack</RootNamespace>
    <AssemblyName>NR6Pack</AssemblyName>
    <TargetFrameworkProfile>Profile7</TargetFrameworkProfile>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\CS0108UseNewKeywordIfHidingIntendedCodeFixProvider.cs">
      <Link>CodeFixes\Custom\CS0108UseNewKeywordIfHidingIntendedCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\CS0152DuplicateCaseLabelValueCodeFixProvider.cs">
      <Link>CodeFixes\Custom\CS0152DuplicateCaseLabelValueCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\CS0162UnreachableCodeDetectedCodeFixProvider.cs">
      <Link>CodeFixes\Custom\CS0162UnreachableCodeDetectedCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\CS0164LabelHasNotBeenReferencedCodeFixProvider.cs">
      <Link>CodeFixes\Custom\CS0164LabelHasNotBeenReferencedCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\CS0759RedundantPartialMethodCodeFixProvider.cs">
      <Link>CodeFixes\Custom\CS0759RedundantPartialMethodCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\CS1105ExtensionMethodMustBeDeclaredStaticCodeFixProvider.cs">
      <Link>CodeFixes\Custom\CS1105ExtensionMethodMustBeDeclaredStaticCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\CS1520MethodMustHaveAReturnTypeCodeFixProvider.cs">
      <Link>CodeFixes\Custom\CS1520MethodMustHaveAReturnTypeCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\InvalidConversionCodeFixProvider.cs">
      <Link>CodeFixes\Custom\InvalidConversionCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeFixes\Custom\ReturnMustNotBeFollowedByAnyExpressionCodeFixProvider.cs">
      <Link>CodeFixes\Custom\ReturnMustNotBeFollowedByAnyExpressionCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\AddBracesCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\AddBracesCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\AddOptionalParameterToInvocationCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\AddOptionalParameterToInvocationCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ConvertBitwiseFlagComparisonToHasFlagsCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ConvertBitwiseFlagComparisonToHasFlagsCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ConvertDoWhileToWhileLoopCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ConvertDoWhileToWhileLoopCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ConvertForToWhileCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ConvertForToWhileCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ConvertHasFlagsToBitwiseFlagComparisonCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ConvertHasFlagsToBitwiseFlagComparisonCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ConvertMultiplyToShiftCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ConvertMultiplyToShiftCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ConvertShiftToMultiplyCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ConvertShiftToMultiplyCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ConvertWhileToDoWhileLoopCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ConvertWhileToDoWhileLoopCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\CreateChangedEventCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\CreateChangedEventCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ExtractWhileConditionToInternalIfStatementCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ExtractWhileConditionToInternalIfStatementCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\GenerateSwitchLabelsCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\GenerateSwitchLabelsCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\InvertLogicalExpressionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\InvertLogicalExpressionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\NegateIsExpressionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\NegateIsExpressionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\RemoveBracesCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\RemoveBracesCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ReplaceAssignmentWithPostfixExpressionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ReplaceAssignmentWithPostfixExpressionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ReplaceOperatorAssignmentWithAssignmentCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ReplaceOperatorAssignmentWithAssignmentCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ReplacePostfixExpressionWithAssignmentCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ReplacePostfixExpressionWithAssignmentCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Custom\ReplaceWithOperatorAssignmentCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Custom\ReplaceWithOperatorAssignmentCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\SpecializedCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\SpecializedCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\AddAnotherAccessorCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\AddAnotherAccessorCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\AddCatchExceptionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\AddCatchExceptionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\AddExceptionDescriptionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\AddExceptionDescriptionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\AddNameToArgumentCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\AddNameToArgumentCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\AddNewFormatItemCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\AddNewFormatItemCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\CheckArrayIndexValueCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\CheckArrayIndexValueCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\CheckCollectionIndexValueCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\CheckCollectionIndexValueCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\CheckDictionaryKeyValueCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\CheckDictionaryKeyValueCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\CheckIfParameterIsNullCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\CheckIfParameterIsNullCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\CheckStringBuilderIndexValueCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\CheckStringBuilderIndexValueCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\CheckStringIndexValueCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\CheckStringIndexValueCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ComputeConstantValueCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ComputeConstantValueCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertAnonymousMethodToLambdaCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertAnonymousMethodToLambdaCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertAutoPropertyToPropertyCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertAutoPropertyToPropertyCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertCoalescingToConditionalExpressionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertCoalescingToConditionalExpressionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertDecToHexCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertDecToHexCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertEqualityOperatorToEqualsCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertEqualityOperatorToEqualsCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertEqualityOperatorToReferenceEqualsCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertEqualityOperatorToReferenceEqualsCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertEqualsToEqualityOperatorCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertEqualsToEqualityOperatorCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertExplicitToImplicitImplementationCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertExplicitToImplicitImplementationCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertExpressionBodyToStatementBodyCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertExpressionBodyToStatementBodyCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertForeachToForCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertForeachToForCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertHexToDecCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertHexToDecCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertIfStatementToConditionalTernaryExpressionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertIfStatementToConditionalTernaryExpressionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertIfStatementToSwitchStatementCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertIfStatementToSwitchStatementCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertImplicitToExplicitImplementationCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertImplicitToExplicitImplementationCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertLambdaBodyExpressionToStatementCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertLambdaBodyExpressionToStatementCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertLambdaStatementToExpressionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertLambdaStatementToExpressionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertLambdaToAnonymousMethodCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertLambdaToAnonymousMethodCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertMethodGroupToAnonymousMethodCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertMethodGroupToAnonymousMethodCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertMethodGroupToLambdaCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertMethodGroupToLambdaCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertReferenceEqualsToEqualityOperatorCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertReferenceEqualsToEqualityOperatorCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertStatementBodyToExpressionBodyCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertStatementBodyToExpressionBodyCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertSwitchToIfCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertSwitchToIfCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ConvertTernaryExpressionToIfStatementCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ConvertTernaryExpressionToIfStatementCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\CreateEventInvocatorCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\CreateEventInvocatorCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\FlipEqualsTargetAndArgumentCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\FlipEqualsTargetAndArgumentCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\FlipOperatorOperandsCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\FlipOperatorOperandsCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\FlipRelationalOperatorArgumentsCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\FlipRelationalOperatorArgumentsCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\InitializeAutoPropertyFromConstructorParameterCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\InitializeAutoPropertyFromConstructorParameterCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\InitializeFieldFromConstructorParameterCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\InitializeFieldFromConstructorParameterCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\InsertAnonymousMethodSignatureCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\InsertAnonymousMethodSignatureCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\InvertConditionalOperatorCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\InvertConditionalOperatorCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\InvertIfCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\InvertIfCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\InvokeAsStaticMethodCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\InvokeAsStaticMethodCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\JoinLocalVariableDeclarationAndAssignmentCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\JoinLocalVariableDeclarationAndAssignmentCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\JoinStringCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\JoinStringCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\NegateLogicalExpressionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\NegateLogicalExpressionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\RemoveCatchExceptionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\RemoveCatchExceptionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\RemoveRegionEndRegionDirectivesCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\RemoveRegionEndRegionDirectivesCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ReplaceAutoPropertyWithPropertyAndBackingFieldCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ReplaceAutoPropertyWithPropertyAndBackingFieldCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ReplaceDirectCastWithSafeCastCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ReplaceDirectCastWithSafeCastCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ReplaceExplicitTypeWithVarCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ReplaceExplicitTypeWithVarCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ReplacePropertyWithBackingFieldWithAutoPropertyCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ReplacePropertyWithBackingFieldWithAutoPropertyCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ReplaceSafeCastWithDirectCastCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ReplaceSafeCastWithDirectCastCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ReplaceVarWithExplicitTypeCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ReplaceVarWithExplicitTypeCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\SplitDeclarationListCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\SplitDeclarationListCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\SplitIfWithAndConditionInTwoCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\SplitIfWithAndConditionInTwoCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\SplitIfWithOrConditionInTwoCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\SplitIfWithOrConditionInTwoCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\SplitLocalVariableDeclarationAndAssignmentCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\SplitLocalVariableDeclarationAndAssignmentCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\SplitStringCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\SplitStringCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\ToAbstractVirtualNonVirtualConversionCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\ToAbstractVirtualNonVirtualConversionCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\UseAsAndNullCheckCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\UseAsAndNullCheckCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\UseSystemEnvironmentNewLineCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\UseSystemEnvironmentNewLineCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Synced\UseSystemStringEmptyCodeRefactoringProvider.cs">
      <Link>CodeRefactoringProviders\Synced\UseSystemStringEmptyCodeRefactoringProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Uncategorized\ConvertIfStatementToNullCoalescingExpressionAction.cs">
      <Link>CodeRefactoringProviders\Uncategorized\ConvertIfStatementToNullCoalescingExpressionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Uncategorized\ConvertIfStatementToReturnStatementAction.cs">
      <Link>CodeRefactoringProviders\Uncategorized\ConvertIfStatementToReturnStatementAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Uncategorized\CreateCustomEventImplementationAction.cs">
      <Link>CodeRefactoringProviders\Uncategorized\CreateCustomEventImplementationAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\CodeRefactorings\Uncategorized\SortUsingsAction.cs">
      <Link>CodeRefactoringProviders\Uncategorized\SortUsingsAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\CodeActionFactory.cs">
      <Link>Common\CodeActionFactory.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Custom\BaseMethodParameterNameMismatchAnalyzer.cs">
      <Link>Diagnostics\Custom\BaseMethodParameterNameMismatchAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Custom\CallToObjectEqualsViaBaseAnalyzer.cs">
      <Link>Diagnostics\Custom\CallToObjectEqualsViaBaseAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Custom\ConstantConditionAnalyzer.cs">
      <Link>Diagnostics\Custom\ConstantConditionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Custom\ConvertIfToAndExpressionAnalyzer.cs">
      <Link>Diagnostics\Custom\ConvertIfToAndExpressionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Custom\NotImplementedExceptionAnalyzer.cs">
      <Link>Diagnostics\Custom\NotImplementedExceptionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Custom\RedundantInternalAnalyzer.cs">
      <Link>Diagnostics\Custom\RedundantInternalAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Custom\RedundantPrivateAnalyzer.cs">
      <Link>Diagnostics\Custom\RedundantPrivateAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\DiagnosticAnalyzerCategories.cs">
      <Link>Common\DiagnosticAnalyzerCategories.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\DiagnosticAnalyzerMarker.cs">
      <Link>Common\DiagnosticAnalyzerMarker.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\DiagnosticCustomTags.cs">
      <Link>Common\DiagnosticCustomTags.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\DiagnosticFactory.cs">
      <Link>Common\DiagnosticFactory.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\DocumentChangeAction.cs">
      <Link>Common\DocumentChangeAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\InsertionAction.cs">
      <Link>Common\InsertionAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\InsertionResult.cs">
      <Link>Common\InsertionResult.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\NRefactoryCodeAction.cs">
      <Link>Common\NRefactoryCodeAction.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\NRefactoryDiagnosticIDs.cs">
      <Link>Common\NRefactoryDiagnosticIDs.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\BaseMethodCallWithDefaultParameterAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\BaseMethodCallWithDefaultParameterAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\BitwiseOperatorOnEnumWithoutFlagsAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\BitwiseOperatorOnEnumWithoutFlagsAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\CompareNonConstrainedGenericWithNullAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\CompareNonConstrainedGenericWithNullAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\CompareNonConstrainedGenericWithNullCodeFixProvider.cs">
      <Link>Diagnostics\CodeQuality\CompareNonConstrainedGenericWithNullCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\CompareOfFloatsByEqualityOperatorAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\CompareOfFloatsByEqualityOperatorAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\CompareOfFloatsByEqualityOperatorCodeFixProvider.cs">
      <Link>Diagnostics\CodeQuality\CompareOfFloatsByEqualityOperatorCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\ConditionalTernaryEqualBranchAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\ConditionalTernaryEqualBranchAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\ConditionalTernaryEqualBranchCodeFixProvider.cs">
      <Link>Diagnostics\CodeQuality\ConditionalTernaryEqualBranchCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\DelegateSubtractionAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\DelegateSubtractionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\DoNotCallOverridableMethodsInConstructorAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\DoNotCallOverridableMethodsInConstructorAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\EmptyGeneralCatchClauseAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\EmptyGeneralCatchClauseAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\EventUnsubscriptionViaAnonymousDelegateAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\EventUnsubscriptionViaAnonymousDelegateAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\LongLiteralEndingLowerLAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\LongLiteralEndingLowerLAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\LongLiteralEndingLowerLCodeFixProvider.cs">
      <Link>Diagnostics\CodeQuality\LongLiteralEndingLowerLCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\NonReadonlyReferencedInGetHashCodeAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\NonReadonlyReferencedInGetHashCodeAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\ObjectCreationAsStatementAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\ObjectCreationAsStatementAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\OperatorIsCanBeUsedAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\OperatorIsCanBeUsedAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\OperatorIsCanBeUsedIssueCodeFixProvider.cs">
      <Link>Diagnostics\CodeQuality\OperatorIsCanBeUsedIssueCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\OptionalParameterRefOutAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\OptionalParameterRefOutAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\PolymorphicFieldLikeEventInvocationAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\PolymorphicFieldLikeEventInvocationAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\CodeQuality\ValueParameterNotUsedAnalyzer.cs">
      <Link>Diagnostics\CodeQuality\ValueParameterNotUsedAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\NUnit\NonPublicMethodWithTestAttributeAnalyzer.cs">
      <Link>Diagnostics\NUnit\NonPublicMethodWithTestAttributeAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\ConvertClosureToMethodGroupAnalyzer.cs">
      <Link>Diagnostics\Opportunities\ConvertClosureToMethodGroupAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\ConvertConditionalTernaryToNullCoalescingAnalyzer.cs">
      <Link>Diagnostics\Opportunities\ConvertConditionalTernaryToNullCoalescingAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\ConvertConditionalTernaryToNullCoalescingCodeFixProvider.cs">
      <Link>Diagnostics\Opportunities\ConvertConditionalTernaryToNullCoalescingCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionAnalyzer.cs">
      <Link>Diagnostics\Opportunities\ConvertIfStatementToConditionalTernaryExpressionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\ConvertIfStatementToSwitchStatementAnalyzer.cs">
      <Link>Diagnostics\Opportunities\ConvertIfStatementToSwitchStatementAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\ConvertNullableToShortFormAnalyzer.cs">
      <Link>Diagnostics\Opportunities\ConvertNullableToShortFormAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\ConvertToStaticTypeAnalyzer.cs">
      <Link>Diagnostics\Opportunities\ConvertToStaticTypeAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\Opportunities\InvokeAsExtensionMethodAnalyzer.cs">
      <Link>Diagnostics\Opportunities\InvokeAsExtensionMethodAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\AccessToStaticMemberViaDerivedTypeAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\AccessToStaticMemberViaDerivedTypeAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\BaseMemberHasParamsAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\BaseMemberHasParamsAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ConvertIfDoToWhileAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ConvertIfDoToWhileAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ConvertIfToOrExpressionAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ConvertIfToOrExpressionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\EmptyEmbeddedStatementAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\EmptyEmbeddedStatementAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\PossibleMistakenCallToGetTypeAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\PossibleMistakenCallToGetTypeAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithFirstOrDefaultAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithFirstOrDefaultAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithLastOrDefaultAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithLastOrDefaultAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSimpleAssignmentAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSimpleAssignmentAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToAnyAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToAnyAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToCountAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToCountAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToFirstAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToFirstAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToFirstOrDefaultAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToFirstOrDefaultAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToLastAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToLastAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToLastOrDefaultAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToLastOrDefaultAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToLongCountAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToLongCountAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToSingleAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToSingleAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\ReplaceWithSingleCallToSingleOrDefaultAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\ReplaceWithSingleCallToSingleOrDefaultAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\SimplifyConditionalTernaryExpressionAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\SimplifyConditionalTernaryExpressionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\SimplifyConditionalTernaryExpressionCodeFixProvider.cs">
      <Link>CodeRefactoringProviders\Synced\SimplifyConditionalTernaryExpressionCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\StringEndsWithIsCultureSpecificAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\StringEndsWithIsCultureSpecificAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\StringIndexOfIsCultureSpecificAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\StringIndexOfIsCultureSpecificAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\StringLastIndexOfIsCultureSpecificAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\StringLastIndexOfIsCultureSpecificAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\PracticesAndImprovements\StringStartsWithIsCultureSpecificAnalyzer.cs">
      <Link>Diagnostics\PracticesAndImprovements\StringStartsWithIsCultureSpecificAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\ArrayCreationCanBeReplacedWithArrayInitializerAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\ArrayCreationCanBeReplacedWithArrayInitializerAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\ConditionIsAlwaysTrueOrFalseAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\ConditionIsAlwaysTrueOrFalseAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\DoubleNegationOperatorAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\DoubleNegationOperatorAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\EmptyStatementAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\EmptyStatementAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\ForStatementConditionIsTrueAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\ForStatementConditionIsTrueAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RedundantAnonymousTypePropertyNameAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RedundantAnonymousTypePropertyNameAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RedundantArgumentNameAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RedundantArgumentNameAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RedundantAttributeParenthesesAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RedundantAttributeParenthesesAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RedundantBaseQualifierAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RedundantBaseQualifierAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RedundantCaseLabelAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RedundantCaseLabelAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RedundantEmptyDefaultSwitchBranchAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RedundantEmptyDefaultSwitchBranchAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RedundantTernaryExpressionAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RedundantTernaryExpressionAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInCode\RemoveRedundantOrStatementAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInCode\RemoveRedundantOrStatementAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EmptyConstructorAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EmptyConstructorAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EmptyConstructorCodeFixProvider.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EmptyConstructorCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EmptyDestructorAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EmptyDestructorAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EmptyDestructorCodeFixProvider.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EmptyDestructorCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EmptyNamespaceAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EmptyNamespaceAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EmptyNamespaceCodeFixProvider.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EmptyNamespaceCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EnumUnderlyingTypeIsIntAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EnumUnderlyingTypeIsIntAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\EnumUnderlyingTypeIsIntCodeFixProvider.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\EnumUnderlyingTypeIsIntCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\PartialTypeWithSinglePartAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\PartialTypeWithSinglePartAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\PartialTypeWithSinglePartCodeFixProvider.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\PartialTypeWithSinglePartCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\SealedMemberInSealedClassAnalyzer.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\SealedMemberInSealedClassAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Diagnostics\Synced\RedundanciesInDeclaration\SealedMemberInSealedClassCodeFixProvider.cs">
      <Link>Diagnostics\RedundanciesInDeclaration\SealedMemberInSealedClassCodeFixProvider.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Util\GeneratedCodeRecognition.cs">
      <Link>Common\GeneratedCodeRecognition.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Util\GettextCatalog.cs">
      <Link>Common\GettextCatalog.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Util\HelpLink.cs">
      <Link>Common\HelpLink.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Util\NRefactory6Host.cs">
      <Link>Common\NRefactory6Host.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp.Refactoring\Util\RefactoringHelpers.cs">
      <Link>Common\RefactoringHelpers.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Features\Completion\SyntaxKindSet.cs">
      <Link>Common\SyntaxKindSet.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Refactoring\CodeRefactoring.cs">
      <Link>Common\CodeRefactoring.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Refactoring\TypeGuessing.cs">
      <Link>Common\TypeGuessing.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Reflection\CSharpSyntaxContext.cs">
      <Link>Common\CSharpSyntaxContext.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\AnnotationTable.cs">
      <Link>Common\AnnotationTable.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CodeFixContextExtensions.cs">
      <Link>Common\CodeFixContextExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CodeGenerationSymbolFactory.cs">
      <Link>Common\CodeGenerationSymbolFactory.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CodeRefactoringContextExtensions.cs">
      <Link>Common\CodeRefactoringContextExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CommonAccessibilityUtilities.cs">
      <Link>Common\CommonAccessibilityUtilities.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CommonSyntaxNodeOrTokenExtensions.cs">
      <Link>Common\CommonSyntaxNodeOrTokenExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CompilationExtensions.cs">
      <Link>Common\CompilationExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CompilationUnitSyntaxExtensions.cs">
      <Link>Common\CompilationUnitSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\CSharpUtil.cs">
      <Link>Common\CSharpUtil.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\DocumentExtensions.cs">
      <Link>Common\DocumentExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\EnumerableExtensions.cs">
      <Link>Common\EnumerableExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ExpressionSyntaxExtensions.cs">
      <Link>Common\ExpressionSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\FindTokenHelper.cs">
      <Link>Common\FindTokenHelper.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\FormatStringHelper.cs">
      <Link>Common\FormatStringHelper.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\Hash.cs">
      <Link>Common\Hash.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\IAssemblySymbolExtensions.cs">
      <Link>Common\IAssemblySymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ICodeDefinitionFactoryExtensions.cs">
      <Link>Common\ICodeDefinitionFactoryExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ICompilationExtensions.cs">
      <Link>Common\ICompilationExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\IDictionaryExtensions.cs">
      <Link>Common\IDictionaryExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\IDocumentExtensions.cs">
      <Link>Common\IDocumentExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ImmutableArrayExtensions.cs">
      <Link>Common\ImmutableArrayExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\INamedTypeSymbolExtensions.cs">
      <Link>Common\INamedTypeSymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\INamespaceOrTypeSymbolExtensions.cs">
      <Link>Common\INamespaceOrTypeSymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\IParameterSymbolExtensions.cs">
      <Link>Common\IParameterSymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ISymbolExtensions.cs">
      <Link>Common\ISymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ITypeParameterSymbolExtensions.cs">
      <Link>Common\ITypeParameterSymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ITypeSymbolExtensions.cs">
      <Link>Common\ITypeSymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\LinkedListExtension.cs">
      <Link>Common\LinkedListExtension.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\Matcher.cs">
      <Link>Common\Matcher.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\MemberDeclarationSyntaxExtensions.cs">
      <Link>Common\MemberDeclarationSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\NameGenerator.cs">
      <Link>Common\NameGenerator.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\NamespaceDeclarationSyntaxExtensions.cs">
      <Link>Common\NamespaceDeclarationSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\NamespaceExtensions.cs">
      <Link>Common\NamespaceExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\NameSyntaxComparer.cs">
      <Link>Common\NameSyntaxComparer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\NameSyntaxExtensions.cs">
      <Link>Common\NameSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ObjectExtensions.cs">
      <Link>Common\ObjectExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\QueryExpressionSyntaxExtensions.cs">
      <Link>Common\QueryExpressionSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SemanticDocument.cs">
      <Link>Common\SemanticDocument.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SemanticEquivalence.cs">
      <Link>Common\SemanticEquivalence.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SemanticMap.cs">
      <Link>Common\SemanticMap.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SemanticModelExtensions.cs">
      <Link>Common\SemanticModelExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SignatureComparer.cs">
      <Link>Common\SignatureComparer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SimpleNameSyntaxExtensions.cs">
      <Link>Common\SimpleNameSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SourceTextExtensions.cs">
      <Link>Common\SourceTextExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SpecializedCollections.cs">
      <Link>Common\SpecializedCollections.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SpeculationAnalyzer.cs">
      <Link>Common\SpeculationAnalyzer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\StringExtensions.cs">
      <Link>Common\StringExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SymbolExtensions.cs">
      <Link>Common\SymbolExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SymbolInfoExtensions.cs">
      <Link>Common\SymbolInfoExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SymbolKeyExtensions.cs">
      <Link>Common\SymbolKeyExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SymbolKeyResolutionExtensions.cs">
      <Link>Common\SymbolKeyResolutionExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntacticDocument.cs">
      <Link>Common\SyntacticDocument.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxExtensions.cs">
      <Link>Common\SyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxListExtension.cs">
      <Link>Common\SyntaxListExtension.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxNodeExtensions.cs">
      <Link>Common\SyntaxNodeExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxTokenExtensions.cs">
      <Link>Common\SyntaxTokenExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxTreeExtensions.cs">
      <Link>Common\SyntaxTreeExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxTriviaExtensions.cs">
      <Link>Common\SyntaxTriviaExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\SyntaxTriviaListExtensions.cs">
      <Link>Common\SyntaxTriviaListExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TaskExtensions.cs">
      <Link>Common\TaskExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TextLineExtension.cs">
      <Link>Common\TextLineExtension.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TokenComparer.cs">
      <Link>Common\TokenComparer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TypeDeclarationSyntaxExtensions.cs">
      <Link>Common\TypeDeclarationSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TypeExtensions.cs">
      <Link>Common\TypeExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TypeGenerator.cs">
      <Link>Common\TypeGenerator.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TypeSyntaxComparer.cs">
      <Link>Common\TypeSyntaxComparer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\TypeSyntaxExtensions.cs">
      <Link>Common\TypeSyntaxExtensions.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\UnicodeNewline.cs">
      <Link>Common\UnicodeNewline.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\UsingsAndExternAliasesDirectiveComparer.cs">
      <Link>Common\UsingsAndExternAliasesDirectiveComparer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\UsingsAndExternAliasesOrganizer.cs">
      <Link>Common\UsingsAndExternAliasesOrganizer.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ValueTuple.cs">
      <Link>Common\ValueTuple.cs</Link>
    </Compile>
    <Compile Include="..\ICSharpCode.NRefactory.CSharp\Util\ValueTuple`2.cs">
      <Link>Common\ValueTuple`2.cs</Link>
    </Compile>
    <Compile Include="Common\ReflectionCompatibilityExtensions.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.CodeAnalysis">
      <HintPath>..\packages\Microsoft.CodeAnalysis.Common.1.0.0-rc1\lib\portable-net45+win8\Microsoft.CodeAnalysis.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp">
      <HintPath>..\packages\Microsoft.CodeAnalysis.CSharp.1.0.0-rc1\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.CSharp.Workspaces">
      <HintPath>..\packages\Microsoft.CodeAnalysis.CSharp.Workspaces.1.0.0-rc1\lib\portable-net45+win8\Microsoft.CodeAnalysis.CSharp.Workspaces.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.CodeAnalysis.Workspaces">
      <HintPath>..\packages\Microsoft.CodeAnalysis.Workspaces.Common.1.0.0-rc1\lib\portable-net45+win8\Microsoft.CodeAnalysis.Workspaces.dll</HintPath>
    </Reference>
    <Reference Include="System.Collections.Immutable">
      <HintPath>..\packages\System.Collections.Immutable.1.1.33-beta\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System.Composition.AttributedModel">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.AttributedModel.dll</HintPath>
    </Reference>
    <Reference Include="System.Composition.Convention">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Convention.dll</HintPath>
    </Reference>
    <Reference Include="System.Composition.Hosting">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Hosting.dll</HintPath>
    </Reference>
    <Reference Include="System.Composition.Runtime">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.Runtime.dll</HintPath>
    </Reference>
    <Reference Include="System.Composition.TypedParts">
      <HintPath>..\packages\Microsoft.Composition.1.0.27\lib\portable-net45+win8+wp8+wpa81\System.Composition.TypedParts.dll</HintPath>
    </Reference>
    <Reference Include="System.Reflection.Metadata">
      <HintPath>..\packages\System.Reflection.Metadata.1.0.18-beta\lib\portable-net45+win8\System.Reflection.Metadata.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <None Include="NR6Pack.nuspec">
      <SubType>Designer</SubType>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="packages.config" />
    <None Include="tools\build-nuget-package.ps1" />
    <None Include="tools\install.ps1" />
    <None Include="tools\uninstall.ps1" />
  </ItemGroup>
  <ItemGroup>
    <None Include="missing.md" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Diagnostics\CompilerWarnings\" />
    <Folder Include="Diagnostics\Synced\CompilerErrors\" />
    <Folder Include="Diagnostics\Synced\ConstraintViolations\InconsistentNamingIssue\" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="CodeActions.html.template" />
    <None Include="CodeIssues.html.template" />
  </ItemGroup>
  <ItemGroup>
    <Analyzer Include="..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0-rc1\tools\analyzers\C#\Microsoft.CodeAnalysis.CSharp.Analyzers.dll" />
    <Analyzer Include="..\packages\Microsoft.CodeAnalysis.Analyzers.1.0.0-rc1\tools\analyzers\Microsoft.CodeAnalysis.Analyzers.dll" />
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />
  <PropertyGroup>
    <PostBuildEvent>powershell $(ProjectDir)tools\build-nuget-package.ps1 $(ConfigurationName)</PostBuildEvent>
  </PropertyGroup>
  <Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(SolutionDir)\.nuget\NuGet.targets')" Text="$([System.String]::Format('$(ErrorText)', '$(SolutionDir)\.nuget\NuGet.targets'))" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>